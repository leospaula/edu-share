diff --git a/src/containers/commentContainer/__tests__/commentContainer.test.js b/src/containers/commentContainer/__tests__/commentContainer.test.js
index fa7f5ca..0f26e46 100644
--- a/src/containers/commentContainer/__tests__/commentContainer.test.js
+++ b/src/containers/commentContainer/__tests__/commentContainer.test.js
@@ -6,8 +6,23 @@ import { Provider } from 'react-redux'
 import { createStore, applyMiddleware } from 'redux'
 import thunk from 'redux-thunk'
 import rootReducer from '../../../reducers/rootReducer'
+import { fetchComments } from '../../../actions/commentActions'
+import { renderWithStore } from '../../../setupTests'
+import { shallow } from 'enzyme'
+import Enzyme from 'enzyme';
+import Adapter from 'enzyme-adapter-react-16';
+import configureMockStore from 'redux-mock-store'
 import { render } from '@testing-library/react'
 
+const middlewares = [thunk]
+const mockStore = configureMockStore(middlewares)
+
+Enzyme.configure({ adapter: new Adapter() });
+
+const mockFns = {
+  fetchComments
+}
+
 const comments = [
   {
     id: 4,
@@ -53,7 +68,28 @@ it ('renders without crashing', ()=> {
                   )
 })
 
-it ('loads comments upon rendering', ()=> {
+it ('fetches comments upon rendering', ()=> {
+  //fix: need to look at testing redux docs and add mockStore and then connect the mock function because currently the real fn is being connected
+  // const spy = jest.spyOn(CommentContainer, "fetchComments")
+  // .mockImplementation(() => 
+  //     Promise.resolve({
+  //       json: () => Promise.resolve(comments)
+  //     })
+  //   )
+  // const store = mockStore({ 
+  //                   comments: {list: [], loadStatus: null, resourceLoaded: null},
+  //                   resources: {list: [], loadStatus:null} 
+  //                 })
+  // const mockFetch = jest.fn()
+  // const wrapper = shallow(<CommentContainer 
+  //                           relativePath={"/resources/:id"} 
+  //                           resourceId={1} 
+  //                           store={store}
+  //                           fetchComments={mockFetch}
+  //                         />
+  //                         )
+  // const spy = jest.spyOn(wrapper.props().children.props, "fetchComments")
+  console.log(store.getState().comments.loadStatus)
   expect(store.getState().comments.loadStatus).toBe(null)
   render(<Provider store={store}>
             <Router>
@@ -64,8 +100,13 @@ it ('loads comments upon rendering', ()=> {
           </Router>
         </Provider>
         )
- 
   expect(store.getState().comments.loadStatus).not.toBe(null)
+  // const wrapper = shallow(<CommentContainer 
+  //                       relativePath={"/resources/:id"} 
+  //                       resourceId={1} />)
+  console.log(store.getState().comments.loadStatus)
+  // expect(mockFetch).toHaveBeenCalled()
+  // mockFns.fetchComments.mockRestore()
 })
 
 it ('authorizes users upon rendering', ()=> {
